type Error = variant {
  InvalidInput : record { msg : text };
  NotFound : record { msg : text };
};
type Project = record {
  id : nat64;
  name : text;
  description : text;
  start_date : nat64;
  due_date : nat64;
};
type Result = variant { Ok : Project; Err : Error };
type Result_1 = variant { Ok : Task; Err : Error };
type Result_2 = variant { Ok : User; Err : Error };
type Result_3 = variant { Ok; Err : Error };
type Task = record {
  id : nat64;
  status : TaskStatus;
  name : text;
  description : text;
  start_date : nat64;
  due_date : nat64;
  project_id : nat64;
  assigned_users : vec nat64;
};
type TaskStatus = variant { Done; Todo; InProgress };
type User = record { id : nat64; name : text };
service : {
  add_project : (text, text, nat64, nat64) -> (Result);
  add_task : (nat64, text, text, nat64, nat64, vec nat64) -> (Result_1);
  add_user : (text) -> (Result_2);
  assign_task_to_user : (nat64, nat64) -> (Result_3);
  change_task_status : (nat64, TaskStatus, vec nat64) -> (Result_1);
  delete_project : (nat64) -> (Result_3);
  delete_task : (nat64) -> (Result_3);
  delete_user : (nat64) -> (Result_3);
  get_project : (nat64) -> (Result) query;
  get_task : (nat64) -> (Result_1) query;
  unassign_task_from_user : (nat64, nat64) -> (Result_3);
  update_project : (nat64, text, text, nat64, nat64) -> (Result);
  update_task : (nat64, text, text, nat64, nat64, TaskStatus, vec nat64) -> (
      Result_1,
    );
  update_user : (nat64, text) -> (Result_2);
}
